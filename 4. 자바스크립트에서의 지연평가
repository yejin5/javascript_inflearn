// 지연 평가를 시작 시키고 유지 시키는(이어 가는) 함수
  // 1. map
  // 2. filter, reject 
var mi = 0;   // i of map
var fi = 0;   // i of filter

_.go(
  _.range(100),   //100번 반복
  _.map(function(val) {
    ++mi;
    return val * val;
  }),
  _.filter(function(val) {
    ++fi;
    return val % 2;
  }),
  _.some(function(val) {
    return val > 100;
  }),
  console.log);

console.log(mi, fi);


var mi = 0;
var fi = 0;

_.go(
  _.range(100),
  L.map(function(val) {   //L -> 지연평가 적용(지연평가 != 엄격한 평가)
    ++mi;
    return val * val;
  }),
  L.filter(function(val) {
    ++fi;
    return val % 2;
  }),
  L.some(function(val) {
    return val > 100;
  }),
  console.log);

console.log(mi, fi);

// 끝을 내는 함수
  // 1. take
  // 2. some, every, find
  
  
*함수형 자바스크립트 요약
  1. 함수를 되도록 작게 만들기
  2. 다형성 높은 함수 만들기
  3. 상태를 변경하지 않거나 정확히 다루어 부수효과를 최소화하기(-> 결과를 통해 상태를 변경하는 것이 좋음)
  4. 동일한 인자를 받으면 항상 동일한 결과를 리턴하는 순수함수 만들기
  5. 복잡한 객체 하나를 인자로 사용하기보다 되도록 일반적인 값 여러개를 인자로 사용하기
  6. 큰 로직을 고차 함수로 만들고 세부 로직을 보조 함수로 완성하기
  7. 어느 곳에서든 바로 혹은 미뤄서 실행할 수 있도록 일반 함수이자 순수 함수로 선언하기
  8. 모델이나 컬렉션 등의 커스텀 객체보다는 기본 객체를 이용하기
  9. 로직의 흐름을 최대한 단방향으로 흐르게 하기
  10. 작은 함수를 조합하여 큰 함수 만들기
