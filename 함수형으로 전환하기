var users = [
  { id: 1, name: 'ID', age: 36 },
  { id: 2, name: 'BJ', age: 32 },
  { id: 3, name: 'JM', age: 32 },
  { id: 4, name: 'PJ', age: 27 },
  { id: 5, name: 'HA', age: 25 },
  { id: 6, name: 'JE', age: 26 },
  { id: 7, name: 'JI', age: 31 },
  { id: 8, name: 'MP', age: 23 }
];

// <1> 명령형 코드 - 기본적
  // 1. 30세 이상인 users를 거른다.
var temp_users = [];
for (var i = 0; i < users.length; i++) {
  if (users[i].age >= 30) {
    temp_users.push(users[i]);
  }
}
console.log(temp_users);

  // 2. 30세 이상인 users의 names를 수집한다.
var names = [];
for (var i = 0; i < temp_users.length; i++) {
  names.push(temp_users[i].name);
}
console.log(names);

  // 3. 30세 미만인 users를 거른다.
var temp_users = [];
for (var i = 0; i < users.length; i++) {
  if (users[i].age < 30) {
    temp_users.push(users[i]);
  }
}
console.log(temp_users);

  // 4. 30세 미만인 users의 ages를 수집한다.
var ages = [];
for (var i = 0; i < temp_users.length; i++) {
  ages.push(temp_users[i].age);
}
console.log(ages);

// <2> _filter, _map으로 리팩토링
- _filter : 응용형 함수, 고차함수(함수를 인자로 받거나 함수를 리턴, 함수 안에서 함수를 실행,,등등)

사용
console.log(
  _filter(users, function(user) {return user.age >=30;})
)
혹은, users와 상관 없이 사용 가능
console.log(
  _filter([1,2,3,4], function(num){return num%2;})
)

function _map(list, mapper){
  var new_list = [];
  for (var i = 0; i < temp_users.length; i++) {
   new_list.push(mapper(list[i]));
  }
  return new_list;
}     //다형성 up

사용
var over_30 = _filter(users, function(user){return user.age >= 30; });
console.log(over_30);

var names = _map(over_30, function(user){return user.name};
conole.log(names);

console.log(
  _map(
    _filter(users, function(user) { return user.age >= 30; }),
    function(user) { return user.name; })
);

console.log(
  _map(
    _filter(users, function(user) { return user.age < 30; }),
    function(user) { return user.age; })
);

* map, filter에서 loop부분 제거 => each
function _filter(list, predi) {
  var new_list = [];
  _each(list, function(val) {
    if (predi(val)) new_list.push(val);
  });
  return new_list;
}

function _map(list, mapper) {
  var new_list = [];
  _each(list, function(val, key) {
    new_list.push(mapper(val, key));
  });
  return new_list;
}

//기존 array에 존재하는 map, filter 사용 예
console.log(
  [1, 2, 3, 4].map(function(val) {
    return val * 2;
  })
);

console.log(
  [1, 2, 3, 4].filter(function(val) {
    return val % 2;
  })
);
-> array에서만 사용가능한 method
-> 이 method는 array class에서 사용하도록 구현되어있기 때문에, 다형성 down

// <3> 커링
// 1. _curry, _curryr
-기본 구조
function _curry(fn){
  return function(a){
    return function(b){
      return fn(a, b);
    }
  }
}

var add = _curry(function(a, b) {
  return a + b;
});

var add10 = add(10);

*curryr -> curryright, 함수 인자 순서를 반대로 한 것
function _curryr(fn){
  return function(a,b){
    return arguments.length == 2 ? fn(a,b) : function(b) {return fn(b,a);};
  }
}

var sub = _curryr(function(a, b) {
  return a - b;
});

// 2. _get 만들어 좀 더 간단하게 하기
get - object에 있는 값을 안전하게 참조하는 것을 의미로 둠
function _get(objm key){
  return obj == null ? undefined : obj[key];
}
ex)
var user1 = users[0];
console.log(user1.name); -> console.log(_get(user1, 'name'));

// <4> _reduce 만들기
function _reduce(list, iter, memo){
  return iter(iter(iter(iter(0,1),2),3));
}와 같이 동작,,
=>
function _reduce(list, iter, memo){
  _each(list, function(val){
    memo = iter(memo, val);
  });
  return memo;
}

_reduce([1,2,3], function(a,b){
  return a+b;
}, 0);

reduce 동작 예시
memo = add(0,1)
memo = add(memo,2)
memo = add(memo,3)
return memo;    --> 재귀적으로 연속 실행해준 결과를 만드는 함수와 같이 동작함

// <5> 파이프라인 만들기
// 1. _pipe
function _pipe(){
  var fns - arguments;
  return function(arg){
    return _reduce(fns, function(arg,fn){
      return fn(arg);
    }, arg)
  }
}

var f1 = _pipe(function(a){return a+1;}, function(a){return a*2;});
f1(1); => 1+1, 2*2 -> return 4;   -> pipe가 추상화된 함수가 reduce라고 이해하면 편할듯

// 2. _go : 두번째 인자부터 함수들을 받아 결과를 바로 만드는 함수, pipe의 즉시실행 버전이라고 이해하면 편함
function _go(){
  var fns = _rest(arguments);
  return _pipe.apply(null fns)(arg);
}

_go(1, function(a){return a+1;}, function(a){return a*2;});

// 3. users에 _go 적용
console.log(
  _map(
    _filter(users, function(user) { return user.age >= 30; }),
    _get('name')));

console.log(
  _map(
    _filter(users, function(user) { return user.age < 30; }),
    _get('age')));

_go(users,
  _filter(function(user) { return user.age >= 30; }),
  _map(_get('name')),
  console.log);

_go(users,
  _filter(user => user.age < 30),
  _map(_get('age')),
  console.log);
  
// 4. 화살표 함수 간단히

// <6> _each의 외부 다형성 높이기
// 1. _each에 null 넣어도 에러 안나게

var _length = _get('length');

function _each(list, iter) {
  var keys = _keys(list);
  for (var i = 0, len = keys.length; i < len; i++) {
    iter(list[keys[i]], keys[i]);
  }
  return list;
}

// 2. _keys 만들기
Object.keys({name : ID, age : 33})
Object.keys([1,2,3,4])

// 3. _keys에서도 _is_object인지 검사하여 null 에러 안나게
function _is_object(obj){
  return typeof obj == 'object' && !!obj;
}

function _keys(obj){
  return _is_object(obj) ? Object.keys(obj) : [];
}
==> null값이 들어와도 안전하게 구현됨

// 4. _each 외부 다형성 높이기
 _each({
    13: 'ID',
    19: 'HD',
    29: 'YD'
  }, function(name) {
    console.log(name);
  });

  console.log( _map({
    13: 'ID',
    19: 'HD',
    29: 'YD'
  }, function(name) {
    return name.toLowerCase();
  }) );

  _go({
      1: users[0],
      3: users[2],
      5: users[4]
    },
    _map(function(user) {
      return user.name.toLowerCase();
    }),
    console.log);
